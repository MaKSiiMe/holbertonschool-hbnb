[33mcommit fd36fc5745f43a2966a4bbef4e9d7d02958821ad[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: ginftls <scdr1905@gmail.com>
Date:   Thu Feb 27 20:24:37 2025 -0500

    Merged amenities.py from Giovanni

[1mdiff --git a/Part2/app/api/v1/amenities.py b/Part2/app/api/v1/amenities.py[m
[1mindex e69de29..5554eef 100644[m
[1m--- a/Part2/app/api/v1/amenities.py[m
[1m+++ b/Part2/app/api/v1/amenities.py[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m# app/api/v1/amenities.py[m
[32m+[m
[32m+[m
[32m+[m[32mfrom flask_restx import Namespace, Resource, fields[m
[32m+[m[32mfrom app.services import facade[m
[32m+[m
[32m+[m[32mapi = Namespace('amenities', description='Amenity operations')[m
[32m+[m
[32m+[m[32m# Define the amenity model for input validation and documentation[m
[32m+[m[32mamenity_model = api.model('Amenity', {[m
[32m+[m[32m    'name': fields.String(required=True, description='Name of the amenity')[m
[32m+[m[32m})[m
[32m+[m
[32m+[m
[32m+[m[32m@api.route('/')[m
[32m+[m[32mclass AmenityList(Resource):[m
[32m+[m[32m    @api.expect(amenity_model, validate=True)[m
[32m+[m[32m    @api.response(201, 'Amenity successfully created')[m
[32m+[m[32m    @api.response(400, 'Invalid input data')[m
[32m+[m[32m    def post(self):[m
[32m+[m[32m        """Register a new amenity"""[m
[32m+[m[32m        amenity_data = api.payload[m
[32m+[m[32m        new_amenity = facade.create_amenity(amenity_data)[m
[32m+[m[32m        return {'id': new_amenity.id, 'name': new_amenity.name}, 201[m
[32m+[m
[32m+[m[32m    @api.response(200, 'List of amenities retrieved successfully')[m
[32m+[m[32m    def get(self):[m
[32m+[m[32m        """Retrieve a list of all amenities"""[m
[32m+[m[32m        amenities = facade.get_all_amenities()[m
[32m+[m[32m        return [{'id': a.id, 'name': a.name} for a in amenities], 200[m
[32m+[m
[32m+[m
[32m+[m[32m@api.route('/<amenity_id>')[m
[32m+[m[32mclass AmenityResource(Resource):[m
[32m+[m[32m    @api.response(200, 'Amenity details retrieved successfully')[m
[32m+[m[32m    @api.response(404, 'Amenity not found')[m
[32m+[m[32m    def get(self, amenity_id):[m
[32m+[m[32m        """Get amenity details by ID"""[m
[32m+[m[32m        amenity = facade.get_amenity(amenity_id)[m
[32m+[m[32m        if not amenity:[m
[32m+[m[32m            return {'error': 'Amenity not found'}, 404[m
[32m+[m[32m        return {'id': amenity.id, 'name': amenity.name}, 200[m
[32m+[m
[32m+[m[32m    @api.expect(amenity_model, validate=True)[m
[32m+[m[32m    @api.response(200, 'Amenity updated successfully')[m
[32m+[m[32m    @api.response(404, 'Amenity not found')[m
[32m+[m[32m    @api.response(400, 'Invalid input data')[m
[32m+[m[32m    def put(self, amenity_id):[m
[32m+[m[32m        """Update an amenity's information"""[m
[32m+[m[32m        amenity_data = api.payload[m
[32m+[m[32m        updated_amenity = facade.update_amenity(amenity_id, amenity_data)[m
[32m+[m[32m        if not updated_amenity:[m
[32m+[m[32m            return {'error': 'Amenity not found'}, 404[m
[32m+[m[32m        return {'id': updated_amenity.id, 'name': updated_amenity.name}, 200[m
